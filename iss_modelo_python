git remote add origin https://github.com/JamileSantos/iss_estocastico.git
git push -u origin master

import numpy as np
from math import log
import statistics

# Calculo do modelo ISS estocástico
# beta - taxa de transmissão da informação
# I0 - quantidade inicial de Ignorants (I)
# S0 - quantidade inicial de Spreader (S)
# R0 - quantidade inicial de Stifler (S)
# k - número médio de contatos entre os indivíduos
# alfa - taxa de recuperação
# t0 - tempo inicial
# tf - tempo final

# fac - fator de amplificação para a intensidade do processo homogeneo simulado


def sol_ISS( k, beta, alfa, I0, S0, R0, t0, tf ):
  
  if I0<= 0 or S0 < 0 or R0 < 0:
    print("Erro!")
    return
  
  
  fac = 1.25
  
  t=[]
  I=[]
  S=[]
  R=[]
  
  tc = t0
  Ic = I0
  Sc = S0
  Rc = R0
  N = Ic + Sc + Rc
  
  lamb_m = fac*(beta*k*(Ic*Sc)/N + alfa*Sc*(Sc+Rc)/N) 
  
  accept = 1
  
  while (tc <= tf):
    
    if accept > 0:
      t.append(tc)
      I.append(Ic)
      S.append(Sc)
      R.append(Rc)
      
    lamb1_c = beta*k*(Ic*Sc)/N      #Probabilidade de I
    lamb2_c = alfa*Sc*(Sc+Rc)/N       #Probabilidade de S
    
    if lamb1_c + lamb2_c > lamb_m:
      lamb_m = fac*(lamb1_c + lamb2_c)
      
    u = np.random.random()
    tc = tc - log(u)/lamb_m
    
    u = np.random.random()
    if u <= lamb1_c / lamb_m:
      Ic = Ic - 1
      Sc = Sc + 1
      accept = 1
      
    elif u <= (lamb1_c + lamb2_c)/lamb_m: 
      Sc = Sc - 1
      Rc = Rc + 1
      accept = 2
    else:
      accept = 0
  
  
  #print(tc)
  tc = tf
  if accept == 1:
    Ic = Ic + 1
    Sc = Sc - 1
  elif accept == 2:
    Sc = Sc + 1
    Rc = Rc - 1
    
  
  t.append(tc)
  I.append(Ic)
  S.append(Sc)
  R.append(Rc)
  
  return t, I, S, R
